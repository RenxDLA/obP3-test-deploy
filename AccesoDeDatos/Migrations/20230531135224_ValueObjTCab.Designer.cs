// <auto-generated />
using System;
using AccesoDeDatos;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AccesoDeDatos.Migrations
{
    [DbContext(typeof(HotelContext))]
    [Migration("20230531135224_ValueObjTCab")]
    partial class ValueObjTCab
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HotelDeCabañas.Entidades.Cabaña", b =>
                {
                    b.Property<int>("NroHabitacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NroHabitacion"));

                    b.Property<string>("Foto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NombreTipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("cantMax")
                        .HasColumnType("int");

                    b.Property<bool>("estaHabilitada")
                        .HasColumnType("bit");

                    b.Property<bool>("tieneJacuzzi")
                        .HasColumnType("bit");

                    b.HasKey("NroHabitacion");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.HasIndex("NombreTipo");

                    b.ToTable("cabañas");
                });

            modelBuilder.Entity("HotelDeCabañas.Entidades.Funcionario", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Email");

                    b.ToTable("funcionarios");
                });

            modelBuilder.Entity("HotelDeCabañas.Entidades.Mantenimiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreEmpleado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NroHabitacion")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NroHabitacion");

                    b.ToTable("mantenimientos");
                });

            modelBuilder.Entity("HotelDeCabañas.Entidades.TipoCabaña", b =>
                {
                    b.Property<string>("NombreTipo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("costoPorHuesped")
                        .HasColumnType("float");

                    b.HasKey("NombreTipo");

                    b.ToTable("tipos");
                });

            modelBuilder.Entity("HotelDeCabañas.Entidades.Cabaña", b =>
                {
                    b.HasOne("HotelDeCabañas.Entidades.TipoCabaña", "tipo")
                        .WithMany()
                        .HasForeignKey("NombreTipo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HotelDeCabañas.ValueObjects.DescripcionCabaña", "Descripcion", b1 =>
                        {
                            b1.Property<int>("CabañaNroHabitacion")
                                .HasColumnType("int");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("CabañaNroHabitacion");

                            b1.ToTable("cabañas");

                            b1.WithOwner()
                                .HasForeignKey("CabañaNroHabitacion");
                        });

                    b.Navigation("Descripcion")
                        .IsRequired();

                    b.Navigation("tipo");
                });

            modelBuilder.Entity("HotelDeCabañas.Entidades.Funcionario", b =>
                {
                    b.OwnsOne("HotelDeCabañas.ValueObjects.Contraseña", "Password", b1 =>
                        {
                            b1.Property<string>("FuncionarioEmail")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("FuncionarioEmail");

                            b1.ToTable("funcionarios");

                            b1.WithOwner()
                                .HasForeignKey("FuncionarioEmail");
                        });

                    b.Navigation("Password")
                        .IsRequired();
                });

            modelBuilder.Entity("HotelDeCabañas.Entidades.Mantenimiento", b =>
                {
                    b.HasOne("HotelDeCabañas.Entidades.Cabaña", "Cabaña")
                        .WithMany()
                        .HasForeignKey("NroHabitacion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HotelDeCabañas.ValueObjects.Costo", "Costo", b1 =>
                        {
                            b1.Property<int>("MantenimientoId")
                                .HasColumnType("int");

                            b1.Property<double>("Valor")
                                .HasColumnType("float");

                            b1.HasKey("MantenimientoId");

                            b1.ToTable("mantenimientos");

                            b1.WithOwner()
                                .HasForeignKey("MantenimientoId");
                        });

                    b.Navigation("Cabaña");

                    b.Navigation("Costo")
                        .IsRequired();
                });

            modelBuilder.Entity("HotelDeCabañas.Entidades.TipoCabaña", b =>
                {
                    b.OwnsOne("HotelDeCabañas.ValueObjects.DescripcionTCabaña", "Descripcion", b1 =>
                        {
                            b1.Property<string>("TipoCabañaNombreTipo")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TipoCabañaNombreTipo");

                            b1.ToTable("tipos");

                            b1.WithOwner()
                                .HasForeignKey("TipoCabañaNombreTipo");
                        });

                    b.Navigation("Descripcion")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
